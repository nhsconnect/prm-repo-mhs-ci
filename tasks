#!/bin/bash -e

DOCKER_OPS_VERSION="2.0.1"
DOCKER_OPS_FILE="ops/docker-ops-${DOCKER_OPS_VERSION}"
mkdir -p ops
if [[ ! -f $DOCKER_OPS_FILE ]];then
  wget --quiet -O $DOCKER_OPS_FILE https://github.com/kudulab/docker-ops/releases/download/${DOCKER_OPS_VERSION}/docker-ops
fi
source $DOCKER_OPS_FILE

set -Eeo pipefail +u

AWS_REGION=eu-west-2
AWS_DEFAULT_REGION=$AWS_REGION
DOCKER_REGISTRY=327778747031.dkr.ecr.eu-west-2.amazonaws.com
PRM_REPO_MHS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

AWS_HELPERS_VERSION=0.2.27
echo "AWS helper scripts version: $AWS_HELPERS_VERSION"

###########################
# Shared utils            #
###########################

function download_util() {
  local UTIL_VERSION=$1
  local UTIL_FILENAME=$2

  local UTIL_FILEPATH="docker-scripts/utils/$UTIL_VERSION/$UTIL_FILENAME"

  mkdir -p "docker-scripts/utils/$UTIL_VERSION"
  if [[ ! -f $UTIL_FILEPATH ]];then
    wget --quiet -O $UTIL_FILEPATH https://github.com/nhsconnect/prm-deductions-support-infra/releases/download/${UTIL_VERSION}/${UTIL_FILENAME}
  fi
  chmod +x $UTIL_FILEPATH

  echo "$UTIL_FILEPATH"
}

function fetch_redaction_utils() {
  download_util $AWS_HELPERS_VERSION run-with-redaction.sh
  download_util $AWS_HELPERS_VERSION redactor
}

# Do not change the file name as the aws helper scripts depend on it
AWS_HELPERS_FILE="utils/$AWS_HELPERS_VERSION/aws-helpers"

mkdir -p "utils/$AWS_HELPERS_VERSION"
if [[ ! -f $AWS_HELPERS_FILE ]];then
  wget --quiet -O $AWS_HELPERS_FILE https://github.com/nhsconnect/prm-deductions-support-infra/releases/download/${AWS_HELPERS_VERSION}/aws-helpers
fi
chmod +x $AWS_HELPERS_FILE
source $AWS_HELPERS_FILE

if [[ -z "$GO_MATERIAL_URL_MHS" ]]; then
  INTEGRATION_ADAPTORS_MHS_REPO_DIRECTORY="${INTEGRATION_ADAPTORS_MHS_REPO_DIRECTORY:-integration-adaptor-mhs}"
else
  # we are running on gocd. use a material checkout next to current repo
  INTEGRATION_ADAPTORS_MHS_REPO_DIRECTORY="$PRM_REPO_MHS_DIR/../integration-adaptor-mhs"
fi

if [[ ! -d $INTEGRATION_ADAPTORS_MHS_REPO_DIRECTORY ]]; then
  echo "You need a checkout of integration-adaptor-mhs. If you have one, set the path in INTEGRATION_ADAPTORS_MHS_REPO_DIRECTORY"
fi

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function docker_login {
  eval $(dojo "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

function build_docker_overlay {
  BASE_IMAGE=$1
  BUILT_IMAGE_URL=$2
  cd $PRM_REPO_MHS_DIR/docker-scripts
  docker build \
    -t $BUILT_IMAGE_URL \
    --build-arg BASE_IMAGE=$BASE_IMAGE \
    --build-arg UTILS_VERSION=$AWS_HELPERS_VERSION .
  cd $PRM_REPO_MHS_DIR
}

function create_our_mhs_build_tag {
  if [[ -z "${GO_PIPELINE_LABEL}" ]]; then
    UPSTREAM_GIT_HASH=$(cd $INTEGRATION_ADAPTORS_MHS_REPO_DIRECTORY && git rev-parse HEAD | cut -c 1-8)
    REPO_GIT_HASH=$(git rev-parse HEAD | cut -c 1-8)
    export BUILD_TAG="${UPSTREAM_GIT_HASH}-${REPO_GIT_HASH}"
  else
    export BUILD_TAG=${GO_PIPELINE_LABEL}
  fi  
}

command="$1"
case "${command}" in
  import_docker) # pulls official release from dockerhub and pushes to ECR
    IMAGE_PREFIX=$2
    if [ -z "$IMAGE_PREFIX" ]; then
      echo "Please specify one of the images to be built: inbound or outbound"
      exit 5
    fi
    UPSTREAM_TAG=1.2.4-amd64
    REPO_GIT_HASH=$(git rev-parse HEAD | cut -c 1-8)
    BUILD_TAG="${UPSTREAM_TAG}-${REPO_GIT_HASH}"
    fetch_redaction_utils
    docker pull nhsdev/nia-mhs-${IMAGE_PREFIX}:${UPSTREAM_TAG}
    build_docker_overlay nhsdev/nia-mhs-${IMAGE_PREFIX}:${UPSTREAM_TAG} $DOCKER_REGISTRY/mhs-${IMAGE_PREFIX}:$BUILD_TAG
    if [[ "$local_build" != "true" ]]; then
      docker_login
      docker push $DOCKER_REGISTRY/mhs-${IMAGE_PREFIX}:$BUILD_TAG
    fi
    docker_ops::create_imagerc "imagerc" "${IMAGE_PREFIX}" "mhs-${IMAGE_PREFIX}" "$BUILD_TAG" "$DOCKER_REGISTRY"
    ;;
  build_docker)
    IMAGE_PREFIX=$2
    if [ -z "$IMAGE_PREFIX" ]; then
      echo "Please specify one of the images to be built: inbound or outbound"
      exit 5
    fi
    create_our_mhs_build_tag
    if [[ "$local_build" != "true" ]]; then
      docker_login
    fi
    BASE_IMAGE_TAG="${BASE_IMAGE_TAG:-1.0.2}"
    cd $INTEGRATION_ADAPTORS_MHS_REPO_DIRECTORY
    DOCKER_DIRECTORY=$IMAGE_PREFIX

    echo Building base image...
    docker build \
     --build-arg BASE_IMAGE_TAG=$BASE_IMAGE_TAG \
     -t mhs-${IMAGE_PREFIX}:$BUILD_TAG \
     -f mhs/$DOCKER_DIRECTORY/Dockerfile .

    echo Built base image in $PWD, moving back to mhs-ci repo dir $PRM_REPO_MHS_DIR
    cd $PRM_REPO_MHS_DIR
    echo Fetching redaction utils in $PWD
    fetch_redaction_utils
    echo Content of docker-scripts
    ls docker-scripts
    echo All content of docker-scripts/utils
    ls -lR docker-scripts/utils

    build_docker_overlay mhs-${IMAGE_PREFIX}:$BUILD_TAG $DOCKER_REGISTRY/mhs-${IMAGE_PREFIX}:$BUILD_TAG
    docker run --rm -v $PRM_REPO_MHS_DIR:/test --entrypoint sh $DOCKER_REGISTRY/mhs-${IMAGE_PREFIX}:$BUILD_TAG -c "openssl verify -verbose /test/test-assets/sds-ldaps.crt"

    if [[ "$local_build" != "true" ]]; then
      docker push $DOCKER_REGISTRY/mhs-${IMAGE_PREFIX}:$BUILD_TAG
    fi
    cd $PRM_REPO_MHS_DIR
    docker_ops::create_imagerc "imagerc" "${IMAGE_PREFIX}" "mhs-${IMAGE_PREFIX}" "$BUILD_TAG" "$DOCKER_REGISTRY"
    ;;
  unit_test)
    MHS_COMPONENT=$2
    if [ -z "$MHS_COMPONENT" ]; then
      echo "Please specify one of the components to test: inbound or outbound"
      exit 5
    fi
    MHS_DIRECTORY=$MHS_COMPONENT
    cd $INTEGRATION_ADAPTORS_MHS_REPO_DIRECTORY
    dojo -c ${PRM_REPO_MHS_DIR}/Dojofile-py "cd mhs/$MHS_DIRECTORY && pipenv install --dev && pipenv run unittests"
    ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
